import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
  id 'java'
}

def appTitle = 'Quantum Voxel'
def appAuthor = 'Ultreon Studios'

configurations {
  transpiler {
    transitive = false
  }
  switchgdx {
    transitive = false
  }
}

dependencies {
  switchgdx "com.thelogicmaster:switch-gdx:$switchGdxVersion"
  transpiler "com.thelogicmaster.clearwing-vm:transpiler:$clearwingVersion"

  implementation "com.thelogicmaster:switch-gdx:$switchGdxVersion"
  implementation project(':client')
}

task transpile(dependsOn: 'build') {
  dependsOn "zipAssets"

  doLast {
    delete "$buildDir/dist"

    List libs = []
    configurations.runtimeClasspath.asList().stream()
      .filter({ file -> !file.isDirectory() })
      .forEach({ file -> libs.add(file.absolutePath) })

    javaexec {
      main = "-jar"
      args = ["$configurations.transpiler.singleFile.absolutePath", "--input"] + libs + [
        "$configurations.switchgdx.singleFile.absolutePath",
        "$buildDir/classes",
        "$rootDir/core/build/classes",
        "--output", "$buildDir/dist",
        "--config", "$projectDir/switch.json"
      ]
    }

    copy {
      from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
      include "*.cpp", "**/*.cpp"
      include "*.hpp", "**/*.hpp"
      include "*.h", "**/*.h"
      include "*.c", "**/*.c"
      into "$buildDir/dist/src"
      includeEmptyDirs = false
    }

    copy {
      from(configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "**/*.class"
        exclude "META-INF", "META-INF/**"
        exclude "**/*.gwt.xml"
        exclude "**.cpp", "**/*.cpp"
        exclude "**.hpp", "**/*.hpp"
        exclude "**.h", "**/*.h"
        exclude "**.c", "**/*.c"
        exclude "switchgdx/**"
      }
      into "$buildDir/dist/romfs/classpath"
      includeEmptyDirs = false
    }

    copy {
      from "$rootDir/assets"
      into "$buildDir/dist/romfs"
    }

    copy {
      from "$projectDir/icon.jpg"
      into "$buildDir/dist"
    }

    copy {
      from({ zipTree("$configurations.switchgdx.singleFile.absolutePath") }) {
        include "switchgdx/project/**"
        eachFile { fcd ->
          fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(2))
        }
      }
      into "$buildDir/dist"
    }
    delete "$buildDir/dist/switchgdx"

    copy {
      from(fileTree("res"))
      into "$buildDir/dist"
    }

    exec {
      if (DefaultNativePlatform.currentOperatingSystem.isWindows())
        commandLine 'cmd', '/c', "C:\\msys64\\usr\\bin\\rsync -crh --delete --checksum --exclude '/cmake-build-*' --exclude '/build-*' --exclude '/build' --exclude '/data' --exclude '/sdmc' --exclude '/.idea' dist/ ${rootProject.name}"
      else
        commandLine 'bash', '-c', "rsync -crh --delete --checksum --exclude '/cmake-build-*' --exclude '/build-*' --exclude '/build' --exclude '/data' --exclude '/sdmc' --exclude '/.idea' dist/ ${rootProject.name}"
      workingDir "$buildDir"
    }
  }
}
configure(transpile) {
  group "SwitchGDX"
  description = "Run the transpiler to generate the C++ project code"
}

task run(dependsOn: transpile) {
  doLast {
    exec {
      if (DefaultNativePlatform.currentOperatingSystem.isWindows())
        commandLine 'C:\\msys64\\msys2_shell.cmd', '-mingw64', '-where', "$buildDir${File.separator}${rootProject.name}", '-c', 'cmake -DCMAKE_BUILD_TYPE=Debug -S . -B build-run -G Ninja && cmake --build build-run || sleep 50000'
      else
        commandLine 'bash', '-c', 'cmake -DCMAKE_BUILD_TYPE=Debug -S . -B build-run -G Ninja && cmake --build build-run'
      workingDir "$buildDir${File.separator}${rootProject.name}"
    }
    if (DefaultNativePlatform.currentOperatingSystem.isWindows()) {
      copy { // Todo: Copy only needed
        from "C:\\msys64\\mingw64\\bin"
        include "*.dll"
        into "$buildDir\\${rootProject.name}\\build-run"
      }
    }
    exec {
      if (DefaultNativePlatform.currentOperatingSystem.isWindows())
        commandLine 'cmd', '/c', 'build-run\\SwitchGDX.exe'
      else
        commandLine 'bash', '-c', './build-run/SwitchGDX'
      workingDir "$buildDir${File.separator}${rootProject.name}"
    }
  }
}
configure(run) {
  group "SwitchGDX"
  description = "Run with the SwitchGDX backend on desktop"
}

task nro(dependsOn: 'transpile') {
  doLast {
    exec {
      if (DefaultNativePlatform.currentOperatingSystem.isWindows())
        commandLine 'C:\\devkitPro\\msys2\\msys2_shell.cmd', '-mingw64', '-where', "$buildDir${File.separator}${rootProject.name}", '-c',
          'cmake --toolchain DevkitA64Libnx.cmake -B build-switch . && cmake --build build-switch -j8 || sleep 50000'
      else
        commandLine 'bash', '-c', 'cmake --toolchain DevkitA64Libnx.cmake -B build-switch . && cmake --build build-switch -j8'
      workingDir "$buildDir${File.separator}${rootProject.name}"
      environment 'APP_TITLE', appTitle
      environment 'APP_AUTHOR', appAuthor
      environment 'APP_VERSION', version
    }
  }
}
configure(nro) {
  group "SwitchGDX"
  description = "Build a homebrew NRO"
}

task deploy(dependsOn: nro) {
  doLast {
    exec {
      if (DefaultNativePlatform.currentOperatingSystem.isWindows())
        commandLine 'C:\\devkitPro\\msys2\\usr\\bin\\bash', '-c', "/opt/devkitpro/tools/bin/nxlink --server ./build-switch/${rootProject.name}.nro"
      else
        commandLine 'bash', '-c', "\$DEVKITPRO/tools/bin/nxlink --server ./build-switch/${rootProject.name}.nro"
      workingDir "$buildDir${File.separator}${rootProject.name}"
    }
  }
}
configure(deploy) {
  group "SwitchGDX"
  description = "Run with the SwitchGDX backend on Switch via NxLink"
}

task ryujinx(dependsOn: nro) {
  doLast {
    Properties properties = new Properties();
    try {
      properties.load(project.rootProject.file('local.properties').newDataInputStream())
    } catch (FileNotFoundException ignored) {
      throw new Exception('The path to the Ryujinx emulator executable is unset. Set "ryujinxPath" in local.properties file.')
    }
    if (!properties.containsKey('ryujinxPath'))
      throw new Exception('The path to the Ryujinx emulator executable is unset. Set "ryujinxPath" in local.properties file.')
    exec {
      if (DefaultNativePlatform.currentOperatingSystem.isWindows())
        commandLine 'cmd', '/c', "${properties.getProperty("ryujinxPath")} build-switch/${rootProject.name}.nro"
      else
        commandLine 'bash', '-c', "${properties.getProperty("ryujinxPath")} ./build-switch/${rootProject.name}.nro"
      workingDir "$buildDir${File.separator}${rootProject.name}"
    }
  }
}
configure(ryujinx) {
  group "SwitchGDX"
  description = "Run with the SwitchGDX backend on Switch via NxLink"
}

task uwp(dependsOn: transpile) {
  doLast {
    exec {
      commandLine 'cmd', '/c', "call uwp.cmd"
      workingDir "$buildDir${File.separator}${rootProject.name}"
    }
  }
}
configure(uwp) {
  group "SwitchGDX"
  description = "Generate the UWP project and open Visual Studio"
}

tasks.register("zipAssets", Zip) {
  from file("../assets")
  archiveFile.set file("build/assets/quantum.zip")
}

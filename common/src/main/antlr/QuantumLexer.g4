lexer grammar QuantumLexer;

WHITESPACE   : ' ' | '\t' | '\n' | '\r';

DIRECTIVE    : '#' [a-zA-Z_][a-zA-Z0-9_]*;
STRING       : '\''([^'\n\r\\]|'\\')*'\'';
IDENTIFIER   : [a-zA-Z_]([a-zA-Z0-9_-]*[a-zA-Z0-9])?;
FLOATING_POINT : [0-9]+('\\'.[0-9]+)?;
NUMBER       : [0-9]+;
COMMENT      : '//' [^\n\r]*;
COMMA        : ',';
SEMICOLON    : ';';
COLON        : ':';
ARROW        : '->';
STAR         : '*';
SLASH        : '/';
PERCENT      : '%';
ASSIGN       : '=';
LESS_THAN    : '<';
GREATER_THAN : '>';
LESS_THAN_EQUAL : '<=';
GREATER_THAN_EQUAL : '>=';
EQUAL        : '==';
NOT_EQUAL    : '!=';
BITWISE_AND  : '&';
BITWISE_OR   : '|';
BITWISE_XOR  : '^';
BITWISE_NOT  : '~';
SHIFT_LEFT   : '<<';
SHIFT_RIGHT  : '>>';
PLUS         : '+';
MINUS        : '-';
DOLLAR       : '$';
AT           : '@';
LPAREN       : '(';
RPAREN       : ')';
LBRACKET     : '[';
RBRACKET     : ']';
LBRACE       : '{';
RBRACE       : '}';
HASH         : '#';
NOT          : '!';
PERSIST_DIRECTIVE : 'persist';
INPUT_DIRECTIVE   : 'input';
IF           : 'if';
IS           : 'is';
ELSE         : 'else';
WHILE        : 'while';
FOR          : 'for';
LOOP         : 'loop';
BREAK        : 'break';
CONTINUE     : 'continue';
STOP         : 'stop';
RETURN       : 'return';
INPUT        : 'input';
PERSIST      : 'persist';
PRESENT      : 'resent';
DIRECIVE     : INPUT | PERSIST;
